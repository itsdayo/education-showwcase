{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/oladayoogundipe/Showwcase-React-Challenge/src/components/AutoComplete.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { Field } from \"formik\";\nimport styled from 'styled-components';\n\nconst AutoComplete = ({\n  options\n}) => {\n  _s();\n\n  const [activeOption, setActiveOption] = useState(0);\n  const [filteredOptions, setFilteredOptions] = useState([]);\n  const [showOptions, setShowOptions] = useState(false);\n  const [userInput, setUserInput] = useState(\"\");\n\n  const onChange = e => {\n    console.log('onChanges');\n    const userInput = e.currentTarget.value;\n    const filteredOptions = options.filter(optionName => optionName.toLowerCase().indexOf(userInput.toLowerCase()) > -1);\n    let arry = filteredOptions;\n    setActiveOption(0);\n    setFilteredOptions(arry);\n    setShowOptions(true);\n    setUserInput(e.currentTarget.value);\n  };\n\n  const onClick = e => {\n    setActiveOption(0);\n    setFilteredOptions([]);\n    setShowOptions(false);\n    setUserInput(e.currentTarget.innerText);\n  };\n\n  const onKeyDown = e => {\n    if (e.keyCode === 13) {\n      setActiveOption(0);\n      setShowOptions(false); //setUserInput(filteredOptions[activeOption])\n    } else if (e.keyCode === 38) {\n      if (activeOption === 0) {\n        return;\n      }\n\n      setActiveOption(activeOption - 1);\n    } else if (e.keyCode === 40) {\n      if (activeOption === filteredOptions.length - 1) {\n        console.log(activeOption);\n        return;\n      }\n\n      setActiveOption(activeOption + 1);\n    }\n  };\n\n  const Options = styled.div`\n border-width:5px;\n border-color:black;\n max-height: 10px;\n    overflow-y: scroll;\n .options{\n    border-width:5px;\n border-color:black;  \n }\n\n`;\n  let optionList;\n\n  if (showOptions && userInput) {\n    if (filteredOptions.length) {\n      optionList = /*#__PURE__*/_jsxDEV(Options, {\n        children: filteredOptions.map((optionName, index) => {\n          let className;\n\n          if (index === activeOption) {\n            className = 'option-active';\n          }\n\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"options\",\n            onClick: onClick,\n            children: optionName\n          }, optionName, false, {\n            fileName: _jsxFileName,\n            lineNumber: 96,\n            columnNumber: 17\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 10\n      }, this);\n    } else {\n      optionList = /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"no-options\",\n        children: /*#__PURE__*/_jsxDEV(\"em\", {\n          children: \"No Option!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 11\n      }, this);\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"search\",\n      children: /*#__PURE__*/_jsxDEV(Field, {\n        type: \"text\",\n        name: \"name\",\n        className: \"search-box\",\n        placeholder: \"Enter the school name\",\n        onChange: onChange,\n        onKeyDown: onKeyDown,\n        value: userInput\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 5\n    }, this), optionList]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 114,\n    columnNumber: 5\n  }, this);\n};\n\n_s(AutoComplete, \"eQYiHC2Dom7Z/vtu/4Nl0POernE=\");\n\n_c = AutoComplete;\nexport default AutoComplete;\n\nvar _c;\n\n$RefreshReg$(_c, \"AutoComplete\");","map":{"version":3,"sources":["/Users/oladayoogundipe/Showwcase-React-Challenge/src/components/AutoComplete.tsx"],"names":["React","useState","Field","styled","AutoComplete","options","activeOption","setActiveOption","filteredOptions","setFilteredOptions","showOptions","setShowOptions","userInput","setUserInput","onChange","e","console","log","currentTarget","value","filter","optionName","toLowerCase","indexOf","arry","onClick","innerText","onKeyDown","keyCode","length","Options","div","optionList","map","index","className"],"mappings":"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","sourcesContent":["import React,{useState, useEffect} from 'react';\n\n\nimport { Formik, Field, Form, } from \"formik\";\nimport styled from 'styled-components'\ninterface Props  {\n    options:string[]\n}\n\n\nconst AutoComplete: React.FC<Props>=({options})=> {\n\n  \nconst [activeOption, setActiveOption] = useState(0);\nconst [filteredOptions, setFilteredOptions] = useState([]);\nconst [showOptions, setShowOptions]=useState(false)\nconst [userInput, setUserInput]=useState(\"\")\n\n const onChange = (e: { currentTarget: { value: any; }; }) => {\n    console.log('onChanges');\n\n    \n    const userInput = e.currentTarget.value;\n\n    const filteredOptions = options.filter(\n      (optionName) =>\n        optionName.toLowerCase().indexOf(userInput.toLowerCase()) > -1\n\n    );\n\n    let arry= filteredOptions as any\n\n    setActiveOption(0)\n    setFilteredOptions(arry)\n    setShowOptions(true)\n    setUserInput(e.currentTarget.value)\n    \n  };\n const onClick = (e: { currentTarget: { innerText: React.SetStateAction<string>; }; }) => {\n    setActiveOption(0)\n    setFilteredOptions([])\n    setShowOptions(false)\n    setUserInput(e.currentTarget.innerText)\n      \n   \n  };\n\n const onKeyDown = (e: { keyCode: number; }) => {\n    \n\n    if (e.keyCode === 13) {\n        setActiveOption(0)\n        setShowOptions(false)\n        //setUserInput(filteredOptions[activeOption])\n      \n    } else if (e.keyCode === 38) {\n      if (activeOption === 0) {\n        return;\n      }\n      setActiveOption(activeOption-1)\n      \n    } else if (e.keyCode === 40) {\n      if (activeOption === filteredOptions.length - 1) {\n        console.log(activeOption);\n        return;\n      }\n      setActiveOption(activeOption+1)\n      \n    }\n  };\n\n  const Options = styled.div`\n border-width:5px;\n border-color:black;\n max-height: 10px;\n    overflow-y: scroll;\n .options{\n    border-width:5px;\n border-color:black;  \n }\n\n`;\n\nlet optionList\nif(showOptions && userInput){\n    if (filteredOptions.length) {\n        optionList = (\n         \n         <Options>\n            {filteredOptions.map((optionName, index) => {\n              let className;\n              if (index === activeOption) {\n                className = 'option-active';\n              }\n              return (\n                <div className=\"options\" key={optionName} onClick={onClick}>\n                  {optionName}\n                </div>\n              );\n            })}\n          </Options>\n        );\n      } else {\n        optionList = (\n          <div className=\"no-options\">\n            <em>No Option!</em>\n          </div>\n        );\n      } \n}\n\n\n  return (\n    <React.Fragment>\n    <div className=\"search\">\n      <Field\n        type=\"text\"\n        name=\"name\"\n        className=\"search-box\"\n        placeholder=\"Enter the school name\"\n        onChange={onChange}\n        onKeyDown={onKeyDown}\n        value={userInput}\n      />\n      \n    </div>\n    {optionList}\n  </React.Fragment>\n  \n  );\n}\n\n\nexport default AutoComplete;"]},"metadata":{},"sourceType":"module"}